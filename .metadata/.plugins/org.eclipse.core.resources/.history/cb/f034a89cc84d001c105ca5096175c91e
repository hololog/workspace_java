package Interface_form;

import java.util.Arrays;
import java.util.Iterator;

public class ArrayList<E> implements List<E> {
	
	private static final int DEFAULT_CAPACITY = 10; //최소 용적크기
	private static final Object[] EMPTY_ARRAY = {}; //빈배열
	
	private int size; //요소개수
	
	Object[] array; //요소를 담을 배열 선언
	
	//생성자1
	public ArrayList(){
		this.array = EMPTY_ARRAY;
		this.size = 0;
		
	}
	
	//생성자2 초기공간 할당
	public ArrayList(int capacity) {
		this.array = new Object[capacity];
		this.size = 0;
		
	}
	
	private void resize() {
		int array_capacity = array.length;
		
		// 용적이 0일때
		if(Arrays.equals(array, EMPTY_ARRAY)) {
			array = new Object[DEFAULT_CAPACITY];
			return;
		}
		// 용량이 꽉
		if(size == array_capacity) {
			int new_capacity = array_capacity * 2;
			
			//copy
			Arrays.copyOf(array, new_capacity);
			return;
		}
		// 용적의 젋반미만일때
		if(size < array_capacity/2) {
			int new_capacity = array_capacity/2;
			Arrays.copyOf(array, Math.max(new_capacity, DEFAULT_CAPACITY));
			return;
		}
	}
	
	@Override
	public boolean add(E value) {
		addLast(value);
		return true;
	}
	
	public void addLast(E value) {
		//꽉차있으며 ㄴ용적 재할당
		if(size == array.length) {
			resize();
		}
		//마지막위치에 요소추가
		array[size] = value; 
		size++;
	}
	
	@Override
	//중간삽입
	public void add(int index, E value) {
		//용적크기확인
		if(index > size || index < 0) {
			throw new IndexOutOfBoundsException();
		}
		if(index == size) {
			addLast(value);
		}
		else {
			if(size == array.length) {
				resize();
			}
			//중간에 자리만들기= 한칸씩 뒤로
			for (int i=size; i>index; i--) {
				array[i] = array[i-1];
			}
			
			array[index] = value; //빈자리삽입
			size++; //size 1+
		}
	}
	 
	public void addFirst(E value) {
		add(0, value);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public E get(int index) {
		if(index < 0 || index >= size) {
			throw new IndexOutOfBoundsException();
		}
		return (E)array[index];
	}
	
	@Override
	public void set(int index, E value) {
		if( index<0 || index >= size) {
			throw new IndexOutOfBoundsException();
		}
		else {
			array[index] = value;
		}
	}
	
	@Override
	public int indexOf(Object value) {
		for (int i=0; i<size ;i++) {
			if(array[i].equals(value)) {
				return i;
			}
		}
		return -1; 
	}
	
	public int lastIndexOf(Object value) {
		for(int i=size-1; i>=0; i--) {
			if(array[i].equals(value)) {
				return i;
			}
		}
		return -1;
	}
	
	public boolean contains(Object value) {
		if(indexOf(value)!=-1) {
			return true;
		} else {
			return false;
		}
	}
	
	@Override
	@SuppressWarnings("Unchecked")
	public E remove(int index) {
		if(index<0 || index>=size) {
			throw new IndexOutOfBoundsException();
		}
		E element = (E) array[index];
		array[index] = null;
		
		for(int i=index; i<size; i++) {
			array[i] = array[i+1];
			array[i+1] = null;
		}
		
		size--;
		resize();
		return element;
			
			
	}
	public boolean remove(Object value) {
		
	}
	
	
}
